
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-fluent/mixing_elbow.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-fluent_mixing_elbow.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-fluent_mixing_elbow.py:

.. _ref_mixing_elbow_tui_api:

Fluid Flow and Heat Transfer in a Mixing Elbow
----------------------------------------------
This example illustrates the setup and solution of a three-dimensional
turbulent fluid flow and heat transfer problem in a mixing elbow. The mixing
elbow configuration is encountered in piping systems in power plants and
processindustries. It is often important to predict the flow field and
temperature field in the area of the mixing regionin order to properly design
the junction.

This example demonstrates how to do the following:

- Use the Watertight Geometry guided workflow to:
    - Import a CAD geometry
    - Generate a surface mesh
    - Describe the geometry
    - Generate a volume mesh
- Launch Ansys Fluent.
- Read an existing mesh file into Ansys Fluent.
- Use mixed units to define the geometry and fluid properties.
- Set material properties and boundary conditions for a turbulent
  forced-convection problem.
- Create a surface report definition and use it as a convergence criterion.
- Calculate a solution using the pressure-based solver.
- Visually examine the flow and temperature fields using the postprocessing
  tools available in Ansys Fluent.

Problem Description:
A cold fluid at 20 deg C flows into the pipe through a large inlet, and mixes
with a warmer fluid at 40 deg C that enters through a smaller inlet located at
the elbow. The pipe dimensions are in inches and the fluid properties and
boundary conditions are given in SI units. The Reynolds number for the flow at
the larger inlet is 50, 800, so a turbulent flow model will be required.

.. GENERATED FROM PYTHON SOURCE LINES 38-41

First, download the geometry file and start Fluent as a service with
Meshing Mode, Double Precision, Number of Processors 2
Importing the graphics module - pyvista

.. GENERATED FROM PYTHON SOURCE LINES 41-55

.. code-block:: default


    import ansys.fluent.core as pyfluent
    from ansys.fluent.core import examples
    from ansys.fluent.post import set_config
    from ansys.fluent.post.pyvista import Graphics

    set_config(blocking=True)

    import_filename = examples.download_file("mixing_elbow.pmdb", "pyfluent/mixing_elbow")

    session = pyfluent.launch_fluent(
        meshing_mode=True, precision="double", processor_count=2
    )








.. GENERATED FROM PYTHON SOURCE LINES 56-57

Select the Watertight Geometry Meshing Workflow

.. GENERATED FROM PYTHON SOURCE LINES 57-60

.. code-block:: default

    session.workflow.InitializeWorkflow(WorkflowType="Watertight Geometry")






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 61-63

Import the CAD geometry. For Length Units, select "in".
Execute the Import Geometry task.

.. GENERATED FROM PYTHON SOURCE LINES 63-70

.. code-block:: default


    session.workflow.TaskObject["Import Geometry"].Arguments = dict(
        FileName=import_filename, LengthUnit="in"
    )

    session.workflow.TaskObject["Import Geometry"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 71-77

Add local sizing:
In the Add Local Sizing task, you are prompted as to whether or not you would
like to add local sizing controls to the faceted geometry. For the purposes
of this example, you can keep the default setting. Execute to complete this
task
and proceed to the next task in the workflow.

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: default

    session.workflow.TaskObject["Add Local Sizing"].AddChildToTask()
    session.workflow.TaskObject["Add Local Sizing"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    False



.. GENERATED FROM PYTHON SOURCE LINES 81-86

Generate the surface mesh:
In the Generate the Surface Mesh task, you can set various properties of the
surface mesh for the faceted geometry. Specify 0.3 for Maximum Size. Execute
the Surface Mesh to complete this task and proceed to the next task in the
workflow.

.. GENERATED FROM PYTHON SOURCE LINES 86-91

.. code-block:: default

    session.workflow.TaskObject["Generate the Surface Mesh"].Arguments = {
        "CFDSurfaceMeshControls": {"MaxSize": 0.3}
    }
    session.workflow.TaskObject["Generate the Surface Mesh"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 92-99

Describe the geometry:
When you select the Describe Geometry task, you are prompted with questions
relating to the nature of the imported geometry. Since the geometry defined
the fluid region. Select The geometry consists of only fluid regions with no
voids for Geometry Type. Execute Describe Geometry to complete this task and
proceed
to the next task in the workflow.

.. GENERATED FROM PYTHON SOURCE LINES 99-108

.. code-block:: default

    session.workflow.TaskObject["Describe Geometry"].UpdateChildTasks(
        SetupTypeChanged=False
    )
    session.workflow.TaskObject["Describe Geometry"].Arguments = dict(
        SetupType="The geometry consists of only fluid regions with no voids"
    )
    session.workflow.TaskObject["Describe Geometry"].UpdateChildTasks(SetupTypeChanged=True)
    session.workflow.TaskObject["Describe Geometry"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 109-113

Update Boundaries Task:
For the wall-inlet boundary, change the Boundary Type field to wall. Execute
Update Boundaries to complete this task and proceed to the next task in the
workflow.

.. GENERATED FROM PYTHON SOURCE LINES 113-121

.. code-block:: default

    session.workflow.TaskObject["Update Boundaries"].Arguments = {
        "BoundaryLabelList": ["wall-inlet"],
        "BoundaryLabelTypeList": ["wall"],
        "OldBoundaryLabelList": ["wall-inlet"],
        "OldBoundaryLabelTypeList": ["velocity-inlet"],
    }
    session.workflow.TaskObject["Update Boundaries"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 122-126

Update your regions:
Select the Update Regions task, where you can review the names and types of
the various regions that have been generated from your imported geometry, and
change them as needed. Keep the default settings, and execute Update Regions.

.. GENERATED FROM PYTHON SOURCE LINES 126-128

.. code-block:: default

    session.workflow.TaskObject["Update Regions"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 129-132

Add Boundary Layers:
Select the Add Boundary Layers task, where you can set properties of the
boundary layer mesh. Keep the default settings, and Add Boundary Layers.

.. GENERATED FROM PYTHON SOURCE LINES 132-141

.. code-block:: default


    session.workflow.TaskObject["Add Boundary Layers"].AddChildToTask()
    session.workflow.TaskObject["Add Boundary Layers"].InsertCompoundChildTask()
    session.workflow.TaskObject["smooth-transition_1"].Arguments = {
        "BLControlName": "smooth-transition_1",
    }
    session.workflow.TaskObject["Add Boundary Layers"].Arguments = {}
    session.workflow.TaskObject["smooth-transition_1"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 142-146

Generate the volume mesh:
Select the Generate the Volume Mesh task, where you can set properties of the
volume mesh. Select the poly-hexcore for Fill With. Execute Generate the
Volume Mesh.

.. GENERATED FROM PYTHON SOURCE LINES 146-154

.. code-block:: default

    session.workflow.TaskObject["Generate the Volume Mesh"].Arguments = {
        "VolumeFill": "poly-hexcore",
        "VolumeFillControls": {
            "HexMaxCellLength": 0.3,
        },
    }
    session.workflow.TaskObject["Generate the Volume Mesh"].Execute()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True



.. GENERATED FROM PYTHON SOURCE LINES 155-156

Check the mesh in Meshing mode

.. GENERATED FROM PYTHON SOURCE LINES 156-158

.. code-block:: default

    session.tui.meshing.mesh.check_mesh()








.. GENERATED FROM PYTHON SOURCE LINES 159-161

Save the mesh file (mixing_elbow.msh.h5)
session.tui.meshing.file.write_mesh('mixing_elbow.msh.h5')

.. GENERATED FROM PYTHON SOURCE LINES 163-168

Switch to Solution mode:
Now that a high-quality mesh has been generated using Ansys Fluent in meshing
mode, you can now switch to solver mode to complete the setup of the
simulation. We have just checked the mesh, so select Yes to switch to
solution mode.

.. GENERATED FROM PYTHON SOURCE LINES 168-170

.. code-block:: default

    session.tui.meshing.switch_to_solution_mode("yes")








.. GENERATED FROM PYTHON SOURCE LINES 171-177

Check the mesh in Solver mode:
The mesh check will list the minimum and maximum x, y, and z values from the
mesh in the default SI unit of meters. It will also report a number of other
mesh features that are checked. Any errors in the mesh will be reported at
this time. Ensure that the minimum volume is not negative, since Ansys Fluent
cannot begin a calculation when this is the case.

.. GENERATED FROM PYTHON SOURCE LINES 177-179

.. code-block:: default

    session.tui.solver.mesh.check()








.. GENERATED FROM PYTHON SOURCE LINES 180-186

Set the working units for the mesh:
select "in" to set inches as the working unit for length. Note:  Because the
default SI units will be used for everything except length, there is no need
to change any other units in this problem. If you want a different working
unit for length, other than inches (for example, millimeters), make the
appropriate change.

.. GENERATED FROM PYTHON SOURCE LINES 186-188

.. code-block:: default

    session.tui.solver.define.units("length", "in")








.. GENERATED FROM PYTHON SOURCE LINES 189-190

Enable heat transfer by activating the energy equation.

.. GENERATED FROM PYTHON SOURCE LINES 190-192

.. code-block:: default

    session.tui.solver.define.models.energy("yes", ", ", ", ", ", ", ", ")








.. GENERATED FROM PYTHON SOURCE LINES 193-194

Create a new material called water-liquid.

.. GENERATED FROM PYTHON SOURCE LINES 194-196

.. code-block:: default

    session.tui.solver.define.materials.copy("fluid", "water-liquid")








.. GENERATED FROM PYTHON SOURCE LINES 197-199

Set up the cell zone conditions for the fluid zone (elbow-fluid). Select
water-liquid from the Material list.

.. GENERATED FROM PYTHON SOURCE LINES 199-225

.. code-block:: default

    session.tui.solver.define.boundary_conditions.fluid(
        "elbow-fluid",
        "yes",
        "water-liquid",
        "no",
        "no",
        "no",
        "no",
        "0",
        "no",
        "0",
        "no",
        "0",
        "no",
        "0",
        "no",
        "0",
        "no",
        "1",
        "no",
        "no",
        "no",
        "no",
        "no",
    )








.. GENERATED FROM PYTHON SOURCE LINES 226-228

Set up the boundary conditions for the inlets, outlet, and walls for your CFD
analysis.

.. GENERATED FROM PYTHON SOURCE LINES 228-248

.. code-block:: default


    # cold inlet (cold-inlet), Setting: Value:
    # Velocity Specification Method: Magnitude, Normal to Boundary

    session.tui.solver.define.boundary_conditions.set.velocity_inlet(
        "cold-inlet", [], "vmag", "no", 0.4, "quit"
    )
    session.tui.solver.define.boundary_conditions.set.velocity_inlet(
        "cold-inlet", [], "ke-spec", "no", "no", "no", "yes", "quit"
    )
    session.tui.solver.define.boundary_conditions.set.velocity_inlet(
        "cold-inlet", [], "turb-intensity", 5, "quit"
    )
    session.tui.solver.define.boundary_conditions.set.velocity_inlet(
        "cold-inlet", [], "turb-hydraulic-diam", 4, "quit"
    )
    session.tui.solver.define.boundary_conditions.set.velocity_inlet(
        "cold-inlet", [], "temperature", "no", 293.15, "quit"
    )








.. GENERATED FROM PYTHON SOURCE LINES 249-251

hot inlet (hot-inlet), Setting: Value:
Velocity Specification Method: Magnitude, Normal to Boundary

.. GENERATED FROM PYTHON SOURCE LINES 251-269

.. code-block:: default



    session.tui.solver.define.boundary_conditions.set.velocity_inlet(
        "hot-inlet", [], "vmag", "no", 1.2, "quit"
    )
    session.tui.solver.define.boundary_conditions.set.velocity_inlet(
        "hot-inlet", [], "ke-spec", "no", "no", "no", "yes", "quit"
    )
    session.tui.solver.define.boundary_conditions.set.velocity_inlet(
        "hot-inlet", [], "turb-intensity", 5, "quit"
    )
    session.tui.solver.define.boundary_conditions.set.velocity_inlet(
        "hot-inlet", [], "turb-hydraulic-diam", 1, "quit"
    )
    session.tui.solver.define.boundary_conditions.set.velocity_inlet(
        "hot-inlet", [], "temperature", "no", 313.15, "quit"
    )








.. GENERATED FROM PYTHON SOURCE LINES 270-273

pressure outlet (outlet), Setting: Value:
Backflow Turbulent Intensity: 5 [%]
Backflow Turbulent Viscosity Ratio: 4

.. GENERATED FROM PYTHON SOURCE LINES 273-281

.. code-block:: default


    session.tui.solver.define.boundary_conditions.set.pressure_outlet(
        "outlet", [], "turb-intensity", 5, "quit"
    )
    session.tui.solver.define.boundary_conditions.set.pressure_outlet(
        "outlet", [], "turb-viscosity-ratio", 4, "quit"
    )








.. GENERATED FROM PYTHON SOURCE LINES 282-283

Enable the plotting of residuals during the calculation.

.. GENERATED FROM PYTHON SOURCE LINES 283-285

.. code-block:: default

    session.tui.solver.solve.monitors.residual.plot("yes")








.. GENERATED FROM PYTHON SOURCE LINES 286-288

Create a surface report definition of average temperature at the outlet
(outlet) called "outlet-temp-avg

.. GENERATED FROM PYTHON SOURCE LINES 288-299

.. code-block:: default

    session.tui.solver.solve.report_definitions.add(
        "outlet-temp-avg",
        "surface-massavg",
        "field",
        "temperature",
        "surface-names",
        "outlet",
        "()",
        "quit",
    )








.. GENERATED FROM PYTHON SOURCE LINES 300-305

Create a convergence condition for outlet-temp-avg:
Provide con-outlet-temp-avg for Conditions. Select outlet-temp-avg Report
Definition. Provide 1e-5 for Stop Criterion. Provide 20 for Ignore Iterations
Before. Provide 15 for Use Iterations. Enable Print. Set Every Iteration to
3.

.. GENERATED FROM PYTHON SOURCE LINES 305-338

.. code-block:: default



    # These settings will cause Fluent to consider the solution converged when the
    # surface report definition value for each of the previous 15 iterations is
    # within 0.001% of the current value. Convergence of the values will be checked
    # every 3 iterations. The first 20 iterations will be ignored, allowing for any
    # initial solution dynamics to settle out. Note that the value printed to the
    # console is the deviation between the current and previous iteration values
    # only.
    session.tui.solver.solve.convergence_conditions(
        "conv-reports",
        "add",
        "con-outlet-temp-avg",
        "initial-values-to-ignore",
        "20",
        "previous-values-to-consider",
        "15",
        "print?",
        "yes",
        "report-defs",
        "outlet-temp-avg",
        "stop-criterion",
        "1e-04",
        "quit",
        "quit",
        "condition",
        "1",
        "frequency",
        "3",
        "quit",
    )
    session.tui.solver.solve.convergence_conditions("frequency", "3", "quit")








.. GENERATED FROM PYTHON SOURCE LINES 339-340

Initialize the flow field using the Hybrid Initialization

.. GENERATED FROM PYTHON SOURCE LINES 340-342

.. code-block:: default

    session.tui.solver.solve.initialize.hyb_initialization()








.. GENERATED FROM PYTHON SOURCE LINES 343-345

Save the case file (mixing_elbow1.cas.h5).
session.tui.solver.file.write_case('mixing_elbow1.cas.h5')

.. GENERATED FROM PYTHON SOURCE LINES 347-348

Solve for 100 Iterations.

.. GENERATED FROM PYTHON SOURCE LINES 348-350

.. code-block:: default

    session.tui.solver.solve.iterate(100)








.. GENERATED FROM PYTHON SOURCE LINES 351-356

Examine the mass flux report for convergence: Select cold-inlet, hot-inlet,
and outlet from the Boundaries selection list.
session.tui.solver.report.fluxes.mass_flow(
   "no", "cold-inlet", "hot-inlet", "outlet", "()", "yes", "mass-flux1.flp"
)

.. GENERATED FROM PYTHON SOURCE LINES 358-360

Save the data file (mixing_elbow1.dat.h5).
session.tui.solver.file.write_data('mixing_elbow1.dat.h5')

.. GENERATED FROM PYTHON SOURCE LINES 362-366

Create and display a definition for velocity magnitude contours on the
symmetry plane:
Provide contour-vel for Contour Name. Select velocity magnitude. Select
symmetry-xyplane from the Surfaces list. Display contour-vel contour.

.. GENERATED FROM PYTHON SOURCE LINES 366-386

.. code-block:: default



    session.tui.solver.display.objects.create(
        "contour",
        "contour-vel",
        "filled?",
        "yes",
        "node-values?",
        "yes",
        "field",
        "velocity-magnitude",
        "surfaces-list",
        "symmetry-xyplane",
        "()",
        "coloring",
        "banded",
        "quit",
    )
    # session.tui.solver.display.objects.display("contour-vel")








.. GENERATED FROM PYTHON SOURCE LINES 387-391

Create and display a definition for temperature contours on the symmetry
plane:
Provide contour-temp for Contour Name. Select temperature. Select
symmetry-xyplane from the Surfaces list. Display contour-temp contour.

.. GENERATED FROM PYTHON SOURCE LINES 391-410

.. code-block:: default


    session.tui.solver.display.objects.create(
        "contour",
        "contour-temp",
        "filled?",
        "yes",
        "node-values?",
        "yes",
        "field",
        "temperature",
        "surfaces-list",
        "symmetry-xyplane",
        "()",
        "coloring",
        "smooth",
        "quit",
    )
    # session.tui.solver.display.objects.display("contour-temp")








.. GENERATED FROM PYTHON SOURCE LINES 411-412

Create and display velocity vectors on the symmetry-xyplane plane:

.. GENERATED FROM PYTHON SOURCE LINES 412-434

.. code-block:: default


    # Provide vector-vel for Vector Name. Select arrow for the Style. Select
    # symmetry-xyplane from the Surfaces selection list. Provide 4 for Scale. Set
    # Skip to 2.
    session.tui.solver.display.objects.create(
        "vector",
        "vector-vel",
        "style",
        "arrow",
        "surface-list",
        "symmetry-xyplane",
        "()",
        "scale",
        "scale-f",
        "4",
        "quit",
        "skip",
        "2",
        "quit",
    )
    # session.tui.solver.display.objects.display("vector-vel")








.. GENERATED FROM PYTHON SOURCE LINES 435-437

Create an iso-surface representing the intersection of the plane z=0 and the
surface outlet. Name: z=0_outlet

.. GENERATED FROM PYTHON SOURCE LINES 437-441

.. code-block:: default

    session.tui.solver.surface.iso_surface(
        "z-coordinate", "z=0_outlet", "outlet", "()", "()", "0", "()"
    )








.. GENERATED FROM PYTHON SOURCE LINES 442-444

Display and save an XY plot of the temperature profile across the centerline
of the outlet for the initial solution

.. GENERATED FROM PYTHON SOURCE LINES 444-470

.. code-block:: default

    session.tui.solver.display.objects.create(
        "xy",
        "xy-outlet-temp",
        "y-axis-function",
        "temperature",
        "surfaces-list",
        "z=0_outlet",
        "()",
        "quit",
    )
    # session.tui.solver.display.objects.display("xy-outlet-temp")
    # session.tui.solver.plot.plot(
    #    "yes",
    #    "temp-1.xy",
    #    "no",
    #    "no",
    #    "no",
    #    "temperature",
    #    "yes",
    #    "1",
    #    "0",
    #    "0",
    #    "z=0_outlet",
    #    "()",
    # )








.. GENERATED FROM PYTHON SOURCE LINES 471-472

Mesh display using PyVista

.. GENERATED FROM PYTHON SOURCE LINES 472-487

.. code-block:: default


    graphics_session = Graphics(session)
    mesh_1 = graphics_session.Meshes["mesh-1"]
    mesh_1.show_edges = True
    mesh_1.surfaces_list = [
        "cold-inlet",
        "hot-inlet",
        "wall-elbow",
        "wall-inlet",
        "symmetry-xyplane",
        "outlet",
    ]

    mesh_1.display()




.. image-sg:: /examples/00-fluent/images/sphx_glr_mixing_elbow_001.png
   :alt: mixing elbow
   :srcset: /examples/00-fluent/images/sphx_glr_mixing_elbow_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 488-489

Temperature Contour display using PyVista

.. GENERATED FROM PYTHON SOURCE LINES 489-497

.. code-block:: default


    # contour_1 = graphics_session.Contours["contour_1"]
    # contour_1.field = "temperature"
    # contour_1.surfaces_list = [
    #     "symmetry-xyplane"
    # ]
    # contour_1.display()








.. GENERATED FROM PYTHON SOURCE LINES 498-499

Velocity Magnitude Contour display using PyVista

.. GENERATED FROM PYTHON SOURCE LINES 499-507

.. code-block:: default


    # contour_2 = graphics_session.Contours["contour_2"]
    # contour_2.field = "velocity-magnitude"
    # contour_2.surfaces_list = [
    #    "symmetry-xyplane"
    # ]
    # contour_2.display()








.. GENERATED FROM PYTHON SOURCE LINES 508-510

Write final case and data.
session.tui.solver.file.write_case_data("mixing_elbow2_tui.cas.h5")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  53.923 seconds)


.. _sphx_glr_download_examples_00-fluent_mixing_elbow.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: mixing_elbow.py <mixing_elbow.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: mixing_elbow.ipynb <mixing_elbow.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
